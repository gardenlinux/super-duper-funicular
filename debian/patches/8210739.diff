# HG changeset patch
# User serb
# Date 1539730073 25200
# Node ID 22517c8020d304661f1fbd1de20b02e14af4bfbf
# Parent  02e4b0ab0f97fdbb050e7054e843dfcecd144d0d
8210739: Calling JSpinner's setFont with null throws NullPointerException
Reviewed-by: psadhukhan

diff -r 02e4b0ab0f97 -r 22517c8020d3 src/java.desktop/macosx/classes/com/apple/laf/AquaSpinnerUI.java
--- a/src/java.desktop/macosx/classes/com/apple/laf/AquaSpinnerUI.java	Tue Oct 16 10:54:50 2018 -0700
+++ b/src/java.desktop/macosx/classes/com/apple/laf/AquaSpinnerUI.java	Tue Oct 16 15:47:53 2018 -0700
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011, 2015, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2011, 2018, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -261,12 +261,14 @@
         editor.setInheritsPopupMenu(true);
 
         if (editor.getFont() instanceof UIResource) {
-            editor.setFont(new FontUIResource(spinner.getFont()));
+            Font font = spinner.getFont();
+            editor.setFont(font == null ? null : new FontUIResource(font));
         }
 
         final JFormattedTextField editorTextField = ((DefaultEditor) editor).getTextField();
         if (editorTextField.getFont() instanceof UIResource) {
-            editorTextField.setFont(new FontUIResource(spinner.getFont()));
+            Font font = spinner.getFont();
+            editorTextField.setFont(font == null ? null : new FontUIResource(font));
         }
         final InputMap spinnerInputMap = getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
         final InputMap editorInputMap = editorTextField.getInputMap();
@@ -739,7 +741,8 @@
                                 = ((JSpinner.DefaultEditor) editor).getTextField();
                         if (tf != null) {
                             if (tf.getFont() instanceof UIResource) {
-                                tf.setFont(new FontUIResource(spinner.getFont()));
+                                Font font = spinner.getFont();
+                                tf.setFont(font == null ? null : new FontUIResource(font));
                             }
                         }
                     }
diff -r 02e4b0ab0f97 -r 22517c8020d3 src/java.desktop/share/classes/javax/swing/JSpinner.java
--- a/src/java.desktop/share/classes/javax/swing/JSpinner.java	Tue Oct 16 10:54:50 2018 -0700
+++ b/src/java.desktop/share/classes/javax/swing/JSpinner.java	Tue Oct 16 15:47:53 2018 -0700
@@ -769,7 +769,7 @@
                         // the text field font was not set by the user
                         Font font = spinner.getFont();
                         if (!newfont.equals(font)) {
-                            getTextField().setFont(new FontUIResource(font));
+                            getTextField().setFont(font == null ? null : new FontUIResource(font));
                         }
                     }
                 }
diff -r 02e4b0ab0f97 -r 22517c8020d3 src/java.desktop/share/classes/javax/swing/plaf/basic/BasicSpinnerUI.java
--- a/src/java.desktop/share/classes/javax/swing/plaf/basic/BasicSpinnerUI.java	Tue Oct 16 10:54:50 2018 -0700
+++ b/src/java.desktop/share/classes/javax/swing/plaf/basic/BasicSpinnerUI.java	Tue Oct 16 15:47:53 2018 -0700
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2000, 2015, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -216,7 +216,8 @@
             JTextField tf = ((JSpinner.DefaultEditor) editor).getTextField();
             if (tf != null) {
                 if (tf.getFont() instanceof UIResource) {
-                    tf.setFont(new FontUIResource(spinner.getFont()));
+                    Font font = spinner.getFont();
+                    tf.setFont(font == null ? null : new FontUIResource(font));
                 }
             }
         }
@@ -999,7 +1000,8 @@
                                 ((JSpinner.DefaultEditor)newEditor).getTextField();
                             if (tf != null) {
                                 if (tf.getFont() instanceof UIResource) {
-                                    tf.setFont(new FontUIResource(spinner.getFont()));
+                                    Font font = spinner.getFont();
+                                    tf.setFont(font == null ? null : new FontUIResource(font));
                                 }
                                 tf.addFocusListener(nextButtonHandler);
                                 tf.addFocusListener(previousButtonHandler);
@@ -1017,7 +1019,8 @@
                                 ((JSpinner.DefaultEditor)editor).getTextField();
                             if (tf != null) {
                                 if (tf.getFont() instanceof UIResource) {
-                                    tf.setFont(new FontUIResource(spinner.getFont()));
+                                    Font font = spinner.getFont();
+                                    tf.setFont(font == null ? null : new FontUIResource(font));
                                 }
                             }
                         }
diff -r 02e4b0ab0f97 -r 22517c8020d3 test/jdk/javax/swing/JSpinner/WrongEditorTextFieldFont/FontSetToNull.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/test/jdk/javax/swing/JSpinner/WrongEditorTextFieldFont/FontSetToNull.java	Tue Oct 16 15:47:53 2018 -0700
@@ -0,0 +1,92 @@
+/*
+ * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+import java.awt.Font;
+
+import javax.swing.JSpinner;
+import javax.swing.SwingUtilities;
+import javax.swing.UIManager;
+import javax.swing.UnsupportedLookAndFeelException;
+import javax.swing.plaf.UIResource;
+
+import static javax.swing.JSpinner.DefaultEditor;
+import static javax.swing.UIManager.getInstalledLookAndFeels;
+
+/**
+ * @test
+ * @key headful
+ * @bug 8210739
+ */
+public final class FontSetToNull {
+
+    private static final Font USERS_FONT = new Font("dialog", Font.BOLD, 41);
+
+    public static void main(final String[] args) throws Exception {
+        for (final UIManager.LookAndFeelInfo laf : getInstalledLookAndFeels()) {
+            SwingUtilities.invokeAndWait(() -> setLookAndFeel(laf));
+            SwingUtilities.invokeAndWait(() -> {
+                // default spinner
+                test(new JSpinner());
+                // spinner which always uses the null font
+                test(new JSpinner(){
+                    @Override
+                    public Font getFont() {
+                        return null;
+                    }
+                });
+            });
+        }
+    }
+
+    /**
+     * A sequence of methods that test a possible NPE.
+     */
+    private static void test(JSpinner spinner) {
+        final DefaultEditor de = (DefaultEditor) spinner.getEditor();
+
+        spinner.setFont(null); // Check possible NPE
+        SwingUtilities.updateComponentTreeUI(de); // Check possible NPE
+        spinner.setFont(null); // Check possible NPE
+
+        // should not replace the font of the TextField
+        de.getTextField().setFont(USERS_FONT);
+        spinner.setFont(null);
+
+        final Font tff = de.getTextField().getFont();
+        if (tff instanceof UIResource || !tff.equals(USERS_FONT)) {
+            throw new RuntimeException("Wrong font: " + tff);
+        }
+
+        spinner.setEditor(new JSpinner().getEditor()); // Check possible NPE
+    }
+
+    private static void setLookAndFeel(final UIManager.LookAndFeelInfo laf) {
+        try {
+            UIManager.setLookAndFeel(laf.getClassName());
+            System.out.println("LookAndFeel: " + laf.getClassName());
+        } catch (ClassNotFoundException | InstantiationException |
+                UnsupportedLookAndFeelException | IllegalAccessException e) {
+            throw new RuntimeException(e);
+        }
+    }
+}

